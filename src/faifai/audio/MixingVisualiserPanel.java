/***************************************************************
 *
 * Interactive Learning Platform: Digital Audio
 * Copyright (c) 2010 Dr. Andrew Kwok-Fai LUI
 * The Open University of Hong Kong
 *
 * Enhance the learning effectiveness of students through greater interactions
 */
/*  This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
package faifai.audio;

public class MixingVisualiserPanel extends javax.swing.JPanel implements Runnable {

  private Thread thisThread;
  private boolean toStop = false;
  private int updateDisplay = 0;
  private MixingProcess theProcess = null;

  /** Creates new form WaveGeneratorPanel */
  public MixingVisualiserPanel() {
    initComponents();
    waveDrawingLabel1.setRepeatDrawWave(true);
    waveDrawingLabel2.setRepeatDrawWave(true);
    waveDrawingLabel3.setRepeatDrawWave(true);
    thisThread = new Thread(this);
    thisThread.start();
    update();
  }

  public MixingProcess startMixingProcess() {
    theProcess = new MixingProcess();
    return theProcess;
  }

  public void update() {
    jLabel1.setText("TIME SCALE: " + waveDrawingLabel1.getTimeScale() + "s");
  }

  public void close() {
    toStop = true;
  }

  public void run() {
    long count = 0;
    while (true) {
      if (toStop) {
        break;
      }
      if (theProcess != null) {
        AudioDataBuffer inputDataBufferA = theProcess.getInputDataBufferA();
        AudioDataBuffer inputDataBufferB = theProcess.getInputDataBufferB();
        AudioDataBuffer outputDataBuffer = theProcess.getOutputDataBuffer();
        if (inputDataBufferA != null) {
          waveDrawingLabel1.setDataBuffer(inputDataBufferA.getDataBuffer(), inputDataBufferA.getDataLength(),
                  inputDataBufferA.getAudioFormat());
        }
        if (inputDataBufferB != null) {
          waveDrawingLabel3.setDataBuffer(inputDataBufferB.getDataBuffer(), inputDataBufferB.getDataLength(),
                  inputDataBufferB.getAudioFormat());
        }
        if (outputDataBuffer != null) {
          waveDrawingLabel2.setDataBuffer(outputDataBuffer.getDataBuffer(), outputDataBuffer.getDataLength(),
                  outputDataBuffer.getAudioFormat());
        }
      }
      try {
        thisThread.sleep(500);
        count++;
        if (count % 3 == 0) {
          updateDisplay = (updateDisplay + 1) % 3;
          update();
        }
      } catch (InterruptedException ex) {
        ex.printStackTrace();
        break;
      } catch (Exception ex) {
        ex.printStackTrace();
      }
    }
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    jPanel1 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    waveDrawingLabel1 = new faifai.audio.WaveDrawingLabel();
    waveDrawingLabel2 = new faifai.audio.WaveDrawingLabel();
    jLabel2 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    jLabel4 = new javax.swing.JLabel();
    waveDrawingLabel3 = new faifai.audio.WaveDrawingLabel();

    setBackground(new java.awt.Color(153, 0, 102));
    setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Mixing Visualiser", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 11), new java.awt.Color(255, 255, 255))); // NOI18N
    setMinimumSize(new java.awt.Dimension(320, 160));
    setPreferredSize(new java.awt.Dimension(320, 160));
    setLayout(new java.awt.GridBagLayout());

    jPanel1.setMinimumSize(new java.awt.Dimension(66, 25));
    jPanel1.setOpaque(false);
    jPanel1.setPreferredSize(new java.awt.Dimension(175, 25));
    jPanel1.setLayout(new java.awt.GridBagLayout());

    jLabel1.setBackground(new java.awt.Color(204, 255, 0));
    jLabel1.setFont(new java.awt.Font("Monospaced", 0, 10));
    jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
    jLabel1.setOpaque(true);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel1.add(jLabel1, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
    add(jPanel1, gridBagConstraints);

    waveDrawingLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
    waveDrawingLabel1.setText("waveDrawingLabel1");
    waveDrawingLabel1.setMaximumSize(new java.awt.Dimension(96, 60));
    waveDrawingLabel1.setMinimumSize(new java.awt.Dimension(96, 60));
    waveDrawingLabel1.setPreferredSize(new java.awt.Dimension(96, 60));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    add(waveDrawingLabel1, gridBagConstraints);

    waveDrawingLabel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
    waveDrawingLabel2.setText("waveDrawingLabel1");
    waveDrawingLabel2.setMaximumSize(new java.awt.Dimension(96, 60));
    waveDrawingLabel2.setMinimumSize(new java.awt.Dimension(96, 60));
    waveDrawingLabel2.setPreferredSize(new java.awt.Dimension(96, 60));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    add(waveDrawingLabel2, gridBagConstraints);

    jLabel2.setForeground(new java.awt.Color(255, 255, 255));
    jLabel2.setText("Input A");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    add(jLabel2, gridBagConstraints);

    jLabel3.setForeground(new java.awt.Color(255, 255, 255));
    jLabel3.setText("Output");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    add(jLabel3, gridBagConstraints);

    jLabel4.setForeground(new java.awt.Color(255, 255, 255));
    jLabel4.setText("Input B");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
    add(jLabel4, gridBagConstraints);

    waveDrawingLabel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
    waveDrawingLabel3.setText("waveDrawingLabel1");
    waveDrawingLabel3.setMaximumSize(new java.awt.Dimension(96, 60));
    waveDrawingLabel3.setMinimumSize(new java.awt.Dimension(96, 60));
    waveDrawingLabel3.setPreferredSize(new java.awt.Dimension(96, 60));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
    add(waveDrawingLabel3, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JPanel jPanel1;
  private faifai.audio.WaveDrawingLabel waveDrawingLabel1;
  private faifai.audio.WaveDrawingLabel waveDrawingLabel2;
  private faifai.audio.WaveDrawingLabel waveDrawingLabel3;
  // End of variables declaration//GEN-END:variables
}
